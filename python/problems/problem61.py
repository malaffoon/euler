"""Problem 61 - Project Euler

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal)
numbers and are generated by the following formulae:

  | Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
  | Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
  | Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
  | Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
  | Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
  | Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next
number (including the last number with the first). Each polygonal type: triangle (P3,127=8128),
square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""
import itertools as it
import utils.mathex as m

class Problem61(object):
    @staticmethod
    def solve():
        def find_candidates(value, polygonals):
            candidates = []
            for func, ps in polygonals.items():
                for p in ps:
                    if p.startswith(value[-2:]):
                        candidates.append((func, p))
            return candidates

        def extend_chain(chain, polygonals):
            func = chain[-1][0]
            value = chain[-1][1]
            func_values = polygonals.pop(func)
            if not polygonals and chain[0][1].startswith(value[-2:]):
                return chain

            for c in find_candidates(value, polygonals):
                next = extend_chain(chain + [c], polygonals)
                if next:
                    return next
            polygonals[func] = func_values
            return None

        polygonals = {}
        for polygonal_func in (m.trigonal, m.tetragonal, m.pentagonal, m.hexagonal, m.heptagonal, m.octagonal):
            #  all the polygonal values 1000-9999 for the polygonal
            iter = it.takewhile(lambda x: x < 10000, filter(lambda x: x > 999, map(lambda x: polygonal_func(x), it.count(1))))
            values = list(str(v) for v in iter)
            values.sort()
            # sort and store string versions of all the values (so we can do .startsWith)
            polygonals[polygonal_func] = values

        # shortest list is octagonals, so start with them
        for c in [(m.octagonal, polygon) for polygon in polygonals[m.octagonal]]:
            result = extend_chain([c], polygonals)
            if result:
                return sum(int(r[1]) for r in result)


    @staticmethod
    def get_tests():
        return [(None, 28684)]


if __name__ == '__main__':
    print("The answer is", Problem61.solve())
